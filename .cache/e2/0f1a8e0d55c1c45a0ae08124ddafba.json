{"id":"node_modules/fast-xml-parser/src/node2json.js","dependencies":[{"name":"/Users/shehanprasanna/Desktop/CeylonHub/github-basics-shehanp12/frontend/package.json","includedInParent":true,"mtime":1633769564558},{"name":"/Users/shehanprasanna/Desktop/CeylonHub/github-basics-shehanp12/frontend/node_modules/fast-xml-parser/package.json","includedInParent":true,"mtime":1629572196963},{"name":"./util","loc":{"line":3,"column":21},"parent":"/Users/shehanprasanna/Desktop/CeylonHub/github-basics-shehanp12/frontend/node_modules/fast-xml-parser/src/node2json.js","resolved":"/Users/shehanprasanna/Desktop/CeylonHub/github-basics-shehanp12/frontend/node_modules/fast-xml-parser/src/util.js"}],"generated":{"js":"'use strict';\n\nconst util = require('./util');\n\nconst convertToJson = function(node, options, parentTagName) {\n  const jObj = {};\n\n  // when no child node or attr is present\n  if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  }\n\n  // otherwise create a textnode if node has some text\n  if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n    const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName)\n    jObj[options.textNodeName] = asArray ? [node.val] : node.val;\n  }\n\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n\n  const keys = Object.keys(node.child);\n  for (let index = 0; index < keys.length; index++) {\n    const tagName = keys[index];\n    if (node.child[tagName] && node.child[tagName].length > 1) {\n      jObj[tagName] = [];\n      for (let tag in node.child[tagName]) {\n        if (node.child[tagName].hasOwnProperty(tag)) {\n          jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));\n        }\n      }\n    } else {\n      const result = convertToJson(node.child[tagName][0], options, tagName);\n      const asArray = (options.arrayMode === true && typeof result === 'object') || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);\n      jObj[tagName] = asArray ? [result] : result;\n    }\n  }\n\n  //add value\n  return jObj;\n};\n\nexports.convertToJson = convertToJson;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/fast-xml-parser/src/node2json.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}}],"sources":{"node_modules/fast-xml-parser/src/node2json.js":"'use strict';\n\nconst util = require('./util');\n\nconst convertToJson = function(node, options, parentTagName) {\n  const jObj = {};\n\n  // when no child node or attr is present\n  if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  }\n\n  // otherwise create a textnode if node has some text\n  if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n    const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName)\n    jObj[options.textNodeName] = asArray ? [node.val] : node.val;\n  }\n\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n\n  const keys = Object.keys(node.child);\n  for (let index = 0; index < keys.length; index++) {\n    const tagName = keys[index];\n    if (node.child[tagName] && node.child[tagName].length > 1) {\n      jObj[tagName] = [];\n      for (let tag in node.child[tagName]) {\n        if (node.child[tagName].hasOwnProperty(tag)) {\n          jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));\n        }\n      }\n    } else {\n      const result = convertToJson(node.child[tagName][0], options, tagName);\n      const asArray = (options.arrayMode === true && typeof result === 'object') || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);\n      jObj[tagName] = asArray ? [result] : result;\n    }\n  }\n\n  //add value\n  return jObj;\n};\n\nexports.convertToJson = convertToJson;\n"},"lineCount":43}},"error":null,"hash":"2fd53449ad307ef6008469acbd576de0","cacheData":{"env":{}}}