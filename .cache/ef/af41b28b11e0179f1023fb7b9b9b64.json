{"id":"node_modules/@aws-crypto/ie11-detection/build/MsWindow.js","dependencies":[{"name":"/Users/shehanprasanna/Desktop/CeylonHub/github-basics-shehanp12/frontend/node_modules/@aws-crypto/ie11-detection/build/MsWindow.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/shehanprasanna/Desktop/CeylonHub/github-basics-shehanp12/frontend/node_modules/@aws-crypto/ie11-detection/src/MsWindow.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/shehanprasanna/Desktop/CeylonHub/github-basics-shehanp12/frontend/package.json","includedInParent":true,"mtime":1633769564558},{"name":"/Users/shehanprasanna/Desktop/CeylonHub/github-basics-shehanp12/frontend/node_modules/@aws-crypto/ie11-detection/package.json","includedInParent":true,"mtime":1629572196808}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isMsWindow = void 0;\nvar msSubtleCryptoMethods = [\n    \"decrypt\",\n    \"digest\",\n    \"encrypt\",\n    \"exportKey\",\n    \"generateKey\",\n    \"importKey\",\n    \"sign\",\n    \"verify\"\n];\nfunction quacksLikeAnMsWindow(window) {\n    return \"MSInputMethodContext\" in window && \"msCrypto\" in window;\n}\n/**\n * Determines if the provided window is (or is like) the window object one would\n * expect to encounter in Internet Explorer 11.\n */\nfunction isMsWindow(window) {\n    if (quacksLikeAnMsWindow(window) && window.msCrypto.subtle !== undefined) {\n        var _a = window.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;\n        return msSubtleCryptoMethods\n            .map(function (methodName) { return subtle_1[methodName]; })\n            .concat(getRandomValues)\n            .every(function (method) { return typeof method === \"function\"; });\n    }\n    return false;\n}\nexports.isMsWindow = isMsWindow;\n"},"sourceMaps":{"js":{"version":3,"file":"MsWindow.js","sourceRoot":"","sources":["../src/MsWindow.ts"],"names":[],"mappings":";;;AAYA,IAAM,qBAAqB,GAA8B;IACvD,SAAS;IACT,QAAQ;IACR,SAAS;IACT,WAAW;IACX,aAAa;IACb,WAAW;IACX,MAAM;IACN,QAAQ;CACT,CAAC;AAmBF,SAAS,oBAAoB,CAAC,MAAc;IAC1C,OAAO,sBAAsB,IAAI,MAAM,IAAI,UAAU,IAAI,MAAM,CAAC;AAClE,CAAC;AAED;;;GAGG;AACH,SAAgB,UAAU,CAAC,MAAc;IACvC,IAAI,oBAAoB,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,SAAS,EAAE;QAClE,IAAA,KAA8B,MAAM,CAAC,QAAQ,EAA3C,eAAe,qBAAA,EAAE,QAAM,YAAoB,CAAC;QACpD,OAAO,qBAAqB;aACzB,GAAG,CAAW,UAAA,UAAU,IAAI,OAAA,QAAM,CAAC,UAAU,CAAC,EAAlB,CAAkB,CAAC;aAC/C,MAAM,CAAC,eAAe,CAAC;aACvB,KAAK,CAAC,UAAA,MAAM,IAAI,OAAA,OAAO,MAAM,KAAK,UAAU,EAA5B,CAA4B,CAAC,CAAC;KAClD;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAVD,gCAUC","sourcesContent":["import { MsSubtleCrypto } from \"./MsSubtleCrypto\";\n\ntype SubtleCryptoMethod =\n  | \"decrypt\"\n  | \"digest\"\n  | \"encrypt\"\n  | \"exportKey\"\n  | \"generateKey\"\n  | \"importKey\"\n  | \"sign\"\n  | \"verify\";\n\nconst msSubtleCryptoMethods: Array<SubtleCryptoMethod> = [\n  \"decrypt\",\n  \"digest\",\n  \"encrypt\",\n  \"exportKey\",\n  \"generateKey\",\n  \"importKey\",\n  \"sign\",\n  \"verify\"\n];\n\n/**\n * The value accessible as `window.msCrypto` in Internet Explorer 11.\n */\nexport interface MsCrypto {\n  getRandomValues: (toFill: Uint8Array) => void;\n  subtle: MsSubtleCrypto;\n}\n\n/**\n * The `window` object in Internet Explorer 11. This interface does not\n * exhaustively document the prefixed features of `window` in IE11.\n */\nexport interface MsWindow extends Window {\n  MSInputMethodContext: any;\n  msCrypto: MsCrypto;\n}\n\nfunction quacksLikeAnMsWindow(window: Window): window is MsWindow {\n  return \"MSInputMethodContext\" in window && \"msCrypto\" in window;\n}\n\n/**\n * Determines if the provided window is (or is like) the window object one would\n * expect to encounter in Internet Explorer 11.\n */\nexport function isMsWindow(window: Window): window is MsWindow {\n  if (quacksLikeAnMsWindow(window) && window.msCrypto.subtle !== undefined) {\n    const { getRandomValues, subtle } = window.msCrypto;\n    return msSubtleCryptoMethods\n      .map<Function>(methodName => subtle[methodName])\n      .concat(getRandomValues)\n      .every(method => typeof method === \"function\");\n  }\n\n  return false;\n}\n"]}},"error":null,"hash":"73f9f37bb5fda5eb6e6e99b4766f89be","cacheData":{"env":{}}}